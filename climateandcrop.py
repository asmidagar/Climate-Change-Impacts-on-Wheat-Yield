# -*- coding: utf-8 -*-
"""climateAndCrop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wLlSEV0HcXbqUn07AZVMwwlAkh0oVt0g

# ***Climate Change Impacts on Wheat Yield: A Data Science Approach***
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

# Load crop dataset
df_crop = pd.read_csv("Crops_AllData_Normalized.csv", encoding='ISO-8859-1')

# Display basic info
df_crop.info()

df_crop.head()

df_climate = pd.read_csv("GlobalLandTemperaturesByCity.csv", encoding='ISO-8859-1')

df_climate.info()

df_climate.head()

# Extract year
df_climate['Year'] = pd.to_datetime(df_climate['dt']).dt.year

# Remove missing values
df_climate = df_climate.dropna(subset=['AverageTemperature'])

# Group by country and year
df_temp_avg = df_climate.groupby(['Country', 'Year'])['AverageTemperature'].mean().reset_index()

df_temp_avg.head()

# Now filter for Wheat Yield
df_crop_filtered = df_crop[(df_crop['Item'] == 'Wheat') & (df_crop['Element'] == 'Yield')]

# Rename columns
df_crop_filtered = df_crop_filtered[['Area', 'Year', 'Value']]
df_crop_filtered.columns = ['Country', 'Year', 'Wheat_Yield']

# Preview
df_crop_filtered.head()

# Merge average temperature with crop yield
df_merged = pd.merge(df_crop_filtered, df_temp_avg, on=['Country', 'Year'])

df_merged = df_merged.rename(columns={'AverageTemperature': 'Avg_Temp'})

df_merged.head()

"""#Linear Regression Model"""

df_merged.head()

X = df_merged[['Avg_Temp']]  # Features
y = df_merged['Wheat_Yield']  # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R¬≤ Score: {r2}")

plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')
plt.xlabel('Average Temperature')
plt.ylabel('Wheat Yield')
plt.title('Temperature vs Wheat Yield')
plt.legend()
plt.show()

"""#Polynomial Regression Model(Deg 2)"""

X = df_merged[['Avg_Temp']]  # Feature
y = df_merged['Wheat_Yield']  # Target

poly = PolynomialFeatures(degree=2)
X_poly = poly.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R¬≤ Score: {r2:.4f}")

# Sort values for smooth curve

X_sorted = np.sort(X.values, axis=0)
X_poly_sorted = poly.transform(X_sorted)
y_poly_pred = model.predict(X_poly_sorted)

plt.scatter(X, y, color='blue', label='Actual')
plt.plot(X_sorted, y_poly_pred, color='red', linewidth=2, label='Polynomial Fit')
plt.xlabel('Average Temperature')
plt.ylabel('Wheat Yield')
plt.title('Polynomial Regression: Temperature vs Wheat Yield')
plt.legend()
plt.show()

"""#4th-Degree Polynomial Regression"""

X = df_merged[['Avg_Temp']]   # Feature
y = df_merged['Wheat_Yield']  # Target

poly4 = PolynomialFeatures(degree=4)
X_poly4 = poly4.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_poly4, y, test_size=0.2, random_state=42)

model4 = LinearRegression()
model4.fit(X_train, y_train)

y_pred = model4.predict(X_test)

mse4 = mean_squared_error(y_test, y_pred)
r2_4 = r2_score(y_test, y_pred)

print(f"4th Degree Polynomial MSE: {mse4:.2f}")
print(f"4th Degree Polynomial R¬≤: {r2_4:.4f}")

# Sort for smooth curve
X_sorted = np.sort(X.values, axis=0)
X_poly_sorted = poly4.transform(X_sorted)
y_sorted_pred = model4.predict(X_poly_sorted)

plt.figure(figsize=(10, 6))
plt.scatter(X, y, color='blue', label='Actual Data', alpha=0.5)
plt.plot(X_sorted, y_sorted_pred, color='red', linewidth=2, label='4th Degree Polynomial Fit')
plt.xlabel('Average Temperature (¬∞C)')
plt.ylabel('Wheat Yield')
plt.title('4th Degree Polynomial Regression: Temp vs Yield')
plt.legend()
plt.grid(True)
plt.show()

"""#Adding more Features"""

df_merged.columns

features = ['Avg_Temp', 'Year']

# Drop rows with missing values in selected columns
df_model = df_merged.dropna(subset=features + ['Wheat_Yield'])

# Define feature matrix (X) and target (y)
X = df_model[features]
y = df_model['Wheat_Yield']

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=4, include_bias=False)  # degree=2 for now, can try 3 or 4 later
X_poly = poly.fit_transform(X)

# Optional: See the new feature names
poly.get_feature_names_out(features)

X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R¬≤ Score: {r2:.4f}")

# For visualization, fix Year at median
median_year = int(X['Year'].median())
temp_range = np.linspace(X['Avg_Temp'].min(), X['Avg_Temp'].max(), 100)
temp_year_array = np.column_stack((temp_range, np.full_like(temp_range, median_year)))

temp_year_poly = poly.transform(temp_year_array)
yield_pred = model.predict(temp_year_poly)

plt.figure(figsize=(10,6))
plt.plot(temp_range, yield_pred, color='red', label='Predicted Yield (Year fixed)')
plt.scatter(X['Avg_Temp'], y, alpha=0.3, label='Actual Data')
plt.xlabel('Average Temperature (¬∞C)')
plt.ylabel('Wheat Yield')
plt.title('Polynomial Regression: Temperature vs Yield')
plt.legend()
plt.grid(True)
plt.show()

"""#Filtering & preparing data for India and Canada"""

# Filter for India and USA, and drop missing values
df_filtered = df_merged[df_merged['Country'].isin(['India', 'Canada'])]
df_filtered = df_filtered.dropna(subset=['Avg_Temp', 'Year', 'Wheat_Yield'])

df_india = df_filtered[df_filtered['Country'] == 'India']
df_can = df_filtered[df_filtered['Country'] == 'Canada']

def train_poly_model(df, country_name):
    # Prepare data
    X = df[['Avg_Temp', 'Year']]
    y = df['Wheat_Yield']

    # Polynomial transform
    poly = PolynomialFeatures(degree=4, include_bias=False)
    X_poly = poly.fit_transform(X)

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=42)

    # Train model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict
    y_pred = model.predict(X_test)

    # Metrics
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print(f"\nüìç Results for {country_name}")
    print(f"Mean Squared Error: {mse:.2f}")
    print(f"R¬≤ Score: {r2:.4f}")

    return model, poly, X_test, y_test, y_pred

india_model, india_poly, X_india_test, y_india_test, y_india_pred = train_poly_model(df_india, 'India')
can_model, can_poly, X_can_test, y_can_test, y_can_pred = train_poly_model(df_can, 'Canada')

plt.figure(figsize=(14, 6))

# India
plt.subplot(1, 2, 1)
plt.scatter(y_india_test, y_india_pred, alpha=0.6, color='green')
plt.plot([y_india_test.min(), y_india_test.max()], [y_india_test.min(), y_india_test.max()], 'r--')
plt.xlabel("Actual Yield")
plt.ylabel("Predicted Yield")
plt.title("India: Actual vs Predicted Wheat Yield")

# Canada
plt.subplot(1, 2, 2)
plt.scatter(y_can_test, y_can_pred, alpha=0.6, color='blue')
plt.plot([y_can_test.min(), y_can_test.max()], [y_can_test.min(), y_can_test.max()], 'r--')
plt.xlabel("Actual Yield")
plt.ylabel("Predicted Yield")
plt.title("Canada: Actual vs Predicted Wheat Yield")

plt.tight_layout()
plt.show()

"""#Building a 3D surface plot of Temp-Year-Yield for each country

"""

def plot_3d_surface(df, model, poly, country_name):
    # Prepare grid of values
    temp_range = np.linspace(df['Avg_Temp'].min(), df['Avg_Temp'].max(), 50)
    year_range = np.linspace(df['Year'].min(), df['Year'].max(), 50)

    temp_grid, year_grid = np.meshgrid(temp_range, year_range)

    # Flatten and prepare for prediction
    grid_points = np.column_stack((temp_grid.ravel(), year_grid.ravel()))
    grid_poly = poly.transform(grid_points)
    yield_pred = model.predict(grid_poly).reshape(temp_grid.shape)

    # Plot
    fig = plt.figure(figsize=(12, 8))
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_surface(temp_grid, year_grid, yield_pred, cmap='viridis', alpha=0.9)

    # Actual data points for comparison
    ax.scatter(df['Avg_Temp'], df['Year'], df['Wheat_Yield'], color='red', s=15, label='Actual Data')

    ax.set_xlabel('Average Temperature (¬∞C)')
    ax.set_ylabel('Year')
    ax.set_zlabel('Wheat Yield')
    ax.set_title(f'3D Surface Plot: {country_name}')
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot for India
plot_3d_surface(df_india, india_model, india_poly, 'India')

# Plot for Canada
plot_3d_surface(df_can, can_model, can_poly, 'Canada')